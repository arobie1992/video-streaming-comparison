<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>WebSocket Stored Video</title>
</head>
<body>
    <video id="video" width="750" controls></video>
    <script type="text/javascript">
        window.addEventListener('load', function () {
            const mimeCodec = 'video/mp4; codecs="avc1.4D401F, mp4a.40.2"';
            const mediaSource = new MediaSource();
            const video = document.querySelector('#video');
            video.src = URL.createObjectURL(mediaSource);
            const textDecoder = new TextDecoder();

            const metrics = {
                streamId: undefined,
                snapshots: []
            };
            const addSnapshot = (metrics, seqNo, msgLength, type) => {
                metrics.snapshots.push({
                    time: performance.now(),
                    seqNo,
                    msgLength,
                    type
                });
            }

            const sendMetrics = () => {
                const metricsReport = {
                    scenario: 'ws/stored',
                    type: 'qos',
                    metrics
                };
                const body = JSON.stringify(metricsReport);
                fetch('https://<%= host %>/metrics', {
                    method: "POST",
                    credentials: "same-origin",
                    headers: {
                        "Content-Type": "application/json",
                        "Content-Length": body.length
                    },
                    body
                });
            }

            const streamVideo = (sourceBuffer) => {
                const ws = new WebSocket('wss://<%= host %>/stream');
                ws.onopen = () => {
                    addSnapshot(metrics, null, 0, 'open');
                }
                ws.onerror = e => console.log('websocket error:', e);
                ws.binaryType = 'arraybuffer';
                const q = [];
                let l = 0;
                ws.onclose = async () => {
                    ws.close();
                    addSnapshot(metrics, null, 0, 'close');
                    console.log('ws closed', 'received:', l);
                    if(!q.length) {
                        mediaSource.endOfStream();
                        sendMetrics();
                        return;
                    }
                    sourceBuffer.onupdateend = () => {
                        if(q.length) {
                            sourceBuffer.appendBuffer(q.shift());
                        } else {
                            mediaSource.endOfStream();
                            sendMetrics();
                        }
                    }
                    if(!sourceBuffer.updating) {
                        sourceBuffer.appendBuffer(q.shift());
                    }
                }
                ws.onmessage = e => {
                    const data = new Uint8Array(e.data);
                    l += data.length;
                    if(!metrics.streamId) {
                        const textRep = textDecoder.decode(data);
                        const sep = textRep.indexOf('.');
                        const seqNo = +textRep.substring(0, sep);
                        metrics.streamId = textRep.substring(sep + 1);
                        addSnapshot(metrics, seqNo, data.length, 'message received');
                        return;
                    }
                    let sep = 0;
                    while(data[sep] !== 0) {
                        sep++;
                    }
                    const encSeqNo = data.subarray(0, sep);
                    const seqNo = +textDecoder.decode(encSeqNo);
                    const videoData = data.subarray(sep+1);
                    addSnapshot(metrics, seqNo, data.length, 'message received');
                    q.push(videoData);
                    if(!sourceBuffer.updating) {
                        sourceBuffer.appendBuffer(q.shift());
                    }
                }
            }

            let sourceBuffer;
            mediaSource.onsourceopen = () => sourceBuffer = mediaSource.addSourceBuffer(mimeCodec);

            let firstPlay = true;
            video.onplay = () => {
                if(firstPlay) {
                    streamVideo(sourceBuffer);
                    firstPlay = false;
                }
            }
        })
    </script>
</body>
</html>